<?xml version='1.0'?>
<!--
Explanation:
============

<templates>
	The outermost tag is the templates tag. It contains the different templates of design patterns.

<template>
	A template contains the structure and the conditions of a particular design pattern template.
	Different variations of a design pattern are treated as different templates of the same superpattern.
	A template has a descriptive name.

<structure>
	The template structure defines the nodes with their relevant attributes and methods, as well as the relationships
	in the pattern, described as edges.

<nodes>
    A list of <node> elements, within the <structure> element

<node>
	Defines a node used in the template with a id unique per template. This id is also the classtype this node
	represents in the model. A node must define a type, which can be 'CLASS' or 'INTERFACE'. A node has optional
	<attributes> and <methods> elements.

<attributes>
    A list of <attribute> elements within a <node> element

<attribute>
	The attribute-tag specifies an attribute of the parentnode, used in the pattern and in the conditions.
	The attribute has an id, unique per template, and a type which must refer to a node defined in the structure.

<methods>
    A list of <method> elements within the <node> element

<method>
	The method-tag specifies a method of the parentnode, used in the pattern and in the conditions.
	The method has an id, unique per template.

<edges>
    A list of <edge> elements within the <template> element.

<edge>
	An edge must have an id, which is unique per template. The attributes node1 and node2 represent the are nodes of
	(abstract) classes or interfaces in a relationship. They refer to a nodes that must be defined earlier in the
	<nodes> element.

<conditions>
	A list of <condition> elements whithin the <template> element. This section describes the conditions adhered to
	the pattern. N.B. Some conditions could be considered more important then others, but the handling of whether
	or not the system under consideration meets the necessary conditions, and thus matches this pattern, is a
	responsibility of the application.

<condition>
	A condition has the following attributes:
	    - id: gives an id to the conditions to identify them (must be unique at least every template).
	    - description: a human-readable, short description of the condition.

<rules>
    A list of <rule> elements within a <condition> element.

<rule>
	A condition is composed of one or more rules. Multiple rules can be used if the rules depend closely on each other.
	Each of them must be true to satisfy the condition.	N.B. We recommend however to minimize combination of rules, to
	facilitate a separate evaluation of the conditions.

	Rule attributes are:
	    - applies: refers to the entity the rule applies to (a previously defines node or edge)
	    - scope: the feature to be examined (OBJECT, RELATION, ATTRIBUTE)
	    - topic: the sort of value to be examined (TYPE, VISIBILITY, ... see TopicType below for all values)
	    - operation: the kind of evaluation (EQUALS, NOT_EQUALS, EXISTS, NOT_EXISTS)
	    - value: the value to be met.

	Examples:
	    To evaluate whether an edge is a directed association, apply the following rule:
		<rule applies="SomeEdge" scope="RELATION" topic="TYPE" operation="EQUALS" value="ASSOCIATION_DIRECTED"/>

        To evaluate if a node is an abstract class, apply the following two rules:
		<rule applies="SomeClass" scope="OBJECT" topic="TYPE"              operation="EQUALS" value="CLASS"/>
		<rule applies="SomeClass" scope="OBJECT" topic="MODIFIER_ABSTRACT" operation="EQUALS" value="true"/>
-->
<xs:schema xmlns:xs='http://www.w3.org/2001/XMLSchema'>

    <xs:element name='method'>
        <xs:complexType>
            <xs:attribute name='id' type='xs:string' use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name='methods'>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref='method' minOccurs='1' maxOccurs='unbounded'/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name='attribute'>
        <xs:complexType>
            <xs:attribute name='id' type='xs:string' use="required"/>
            <xs:attribute name='type' type='xs:string' use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name='attributes'>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref='attribute' minOccurs='1' maxOccurs='unbounded'/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:simpleType name='nodeType'>
        <xs:restriction base='xs:normalizedString'>
            <xs:enumeration value='CLASS'/>
            <xs:enumeration value='INTERFACE'/>
        </xs:restriction>
    </xs:simpleType>

    <xs:element name='node'>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref='attributes' minOccurs='0' maxOccurs='1'/>
                <xs:element ref='methods' minOccurs='0' maxOccurs='1'/>
            </xs:sequence>
            <xs:attribute name='id' type='xs:string' use="required"/>
            <xs:attribute name='type' type='nodeType' use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name='nodes'>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref='node' minOccurs='1' maxOccurs='unbounded'/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name='edge'>
        <xs:complexType>
            <xs:attribute name='id' type='xs:string'/>
            <xs:attribute name='node1' type='xs:string'/>
            <xs:attribute name='node2' type='xs:string'/>
        </xs:complexType>
    </xs:element>

    <xs:element name='edges'>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref='edge' minOccurs='1' maxOccurs='unbounded'/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name='structure'>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref='nodes' minOccurs='1' maxOccurs='1'/>
                <xs:element ref='edges' minOccurs='1' maxOccurs='1'/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:simpleType name='scopeType'>
        <xs:restriction base='xs:normalizedString'>
            <xs:enumeration value='RELATION'/>
            <xs:enumeration value='OBJECT'/>
            <xs:enumeration value='ATTRIBUTE'/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name='topicType'>
        <xs:restriction base='xs:normalizedString'>
            <xs:enumeration value='TYPE'/>
            <xs:enumeration value='VISIBILITY'/>
            <xs:enumeration value='MODIFIER_ABSTRACT'/>
            <xs:enumeration value='CARDINALITY'/>
            <xs:enumeration value='CARDINALITY_LEFT'/>
            <xs:enumeration value='CARDINALITY_RIGHT'/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name='operationType'>
        <xs:restriction base='xs:normalizedString'>
            <xs:enumeration value='EXISTS'/>
            <xs:enumeration value='NOT_EXISTS'/>
            <xs:enumeration value='EQUALS'/>
            <xs:enumeration value='NOT_EQUALS'/>
        </xs:restriction>
    </xs:simpleType>

    <xs:element name='rule'>
        <xs:complexType>
            <xs:attribute name='applies' type='xs:string'/>
            <xs:attribute name='scope' type='scopeType'/>
            <xs:attribute name='topic' type='topicType'/>
            <xs:attribute name='operation' type='operationType'/>
            <xs:attribute name='value' type='xs:string'/>
        </xs:complexType>
    </xs:element>

    <xs:element name='rules'>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref='rule' minOccurs='1' maxOccurs='unbounded'/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name='condition'>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref='rules' minOccurs='1' maxOccurs='1'/>
            </xs:sequence>
            <xs:attribute name='id' type='xs:string' use="required"/>
            <xs:attribute name='description' type='xs:string' use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name='conditions'>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref='condition' minOccurs='1' maxOccurs='unbounded'/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name='template'>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="structure" minOccurs="1" maxOccurs="1"/>
                <xs:element ref="conditions" minOccurs="1" maxOccurs="1"/>
            </xs:sequence>
            <xs:attribute name='name' type='xs:string' use="required"/>
            <xs:attribute name='superpattern' type='xs:string' use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name='templates'>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref='template' minOccurs='1' maxOccurs='unbounded'/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

</xs:schema>