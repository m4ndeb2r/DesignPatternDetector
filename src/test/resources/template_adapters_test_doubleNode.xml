<?xml version="1.0" encoding="UTF-8"?>
<!--
Explanation:
============

<templates>
	De templates-tag contains the different templates of design patterns.

<template>
	A template contains the structure and the conditions of a particular design pattern template.
	Different variations of a design pattern are treated as different templates of an optional superpattern.
	A template has a descriptive name.

<structure>
	The template structure defines the nodes with their relevant attributes and methods, as well as the relationships in the pattern, described as edges.
	
<node>
	Defines a node used in the template with a id unique per template. This id is also the classtype this node represents in the model.
	A node must define a type, which can be 'class' or 'interface'.
	
<attribute>
	The attribute-tag specifies an attribute of the parentnode, used in the pattern and in the conditions.
	The attribute has an id, unique per template, and a type which must refer to a node defined in the structure.
	
<method>
	The method-tag specifies a method of the parentnode, used in the pattern and in the conditions.
	The method has an id, unique per template.

<edge>
	An edge must have an id, which is unique per template.
	Node1 and node2 are nodes of (abstract) classes or interfaces in a relationship. They have names, where a same name refers to a same node (class/interface). These nodes must be defined earlier in the nodes 
	In this way the structure of classes/interfaces and their relationships must be defined unequivocally.
	If relationships are directed, the first node (node1) is the one where the arrow starts, the second (node2) where the arrow arrives.

<conditions>		 
	This section describes the conditions adhered to the pattern.
	N.B. Some conditions could be considered more important then others, but the handling of whether or not the system under consideration meets the necessary conditions, and thus realizes this pattern, is a responsibility of the application.

<condition>
	A condition has attributes:
	- id: gives an id to the conditions to identify them (must be unique at least every template).
	- description: a human-readable, short description of the condition.

<rule>
	A condition is composed by one or more rules. Multiple rules can be used if the rules depend closely on each other. Each of them must be true to satisfy the condition.
	N.B. We recommend however to minimize combination of rules, to promote a separate evaluation of the conditions.

	A rule must be applied on a term (edge or node) given in the structure part of the pattern.
		- The scope is the feature to be examined.
		- The topic contains the sort of value of that scope to be evaluated.
		- The operator gives the way the evaluation must be processed.
		- The value contains the value to be met.

	A rule has an operator. This operator determines the boolean result of the rule. Possible values of the operator can be "equals" or "exists".
	When the "not" attribute is set true, the rule must be evaluated negative (e.g. "equals not" or "not exists"). If not set, the default-value is: not="false".

	operator="equals"
		A binary operator which makes a comparison between the topic of the scope of the node/edge under consideration and the value to be met.

		Examples:
			<rule applies="Client-Target" scope="relation" topic="type" operator="equals" value="ASSOCIATION_DIRECTED"/>
			can be evaluated by using the binary operator 'equals' on the type of the relation of the Client-Target-edge:
			equals(Client-Target.relation.type, ASSOCIATION_DIRECTED) or Client-Target.relation.type == ASSOCIATION_DIRECTED

			<rule applies="Adapter" scope="object" topic="type" operator="equals" value="class"/>
			can be evaluated by using the binary operator 'equals' on the type of the object Adapter:
			equals(Adapter.object.type, class) or Adapter.object.type == class

			<rule applies="Target" scope="object" topic="modifier_abstract" operator="equals" value="true"/>
			can be evaluated by using the binary operator 'equals' on the abstract modifier of the object Adapter:
			equals(Target.object.modifier_abstract, true) or Target.object.modifier_abstract == true

	operator="exists"
		Determines if a specific object exists, meeting the values as set in applies, scope, topic and value.

		Examples:
			<rule applies="Client" scope="attribute" topic="type" operator="exists" value="Adapter"/>
			returns true if the Client has an attribute of type Adapter

			<rule applies="Client" scope="attribute" not="true" operator="exists" topic="type" value="Adaptee"/>
			returns true if the Client has not an attribut of type Adaptee
	
**TODO**
List al posible values and their combinations		
	 
- An example of combined rules is exploring the cardinality at both ends of an association.
- Another example is when the secund rule applies to a scope set in the first rule (as a sort of 'variable'); e.g. Adapter-condition #14		
		
			The scope can be:
			relation
			object
			attribute
			method	
			
			
		
Type gives the relationtype between these two nodes.

Possible values of type are:
       -  ASSOCIATION             bidirectional association
 x      -  ASSOCIATION_DIRECTED    unidirectional association  from node1 to node 2
       -  AGGREGATE               node2 is the aggregate
       -  COMPOSITE               node2 is the composite
 x      -  INHERITANCE             node2 is the (abstract) superclass
                                  node1 is a subclass or subinterface which may
				  have relations to other classes/interfaces
				  
       -  INHERITANCE_MULTI       node2 is the superclass or (super)interface
                                  node1 is the subclass.
				  node2 may have more subclasses than the template defines,
				  and none of them may have relations to other classes/interfaces.
       -  DEPENDENCY		  node1 depends on node2
	x		 -  REALIZATION			node2 is a realization of an interface
	
	operator="exists"
		Determines if a specific object exists, meeting the values as set in applies, scope, topic and value.

		Examples:
			<rule applies="Client" scope="attribute" topic="type" operator="exists" value="Adapter"/>
			returns true if the Client has an attribute of type Adapter

			<rule applies="Client" scope="attribute" not="true" operator="exists" topic="type" value="Adaptee"/>
			returns true if the Client has not an attribute of type Adaptee
		
-->
<templates>
			               			                 
   <template name ="Adapter-ObjectAdapter-AbstractClass" superpattern="Adapter">	
			<structure>
				<nodes>
					<node id="Client" type="class">
						<attribute id="adapter" type="Target"/>
						<method id="adapter.request" />
					</node>
					<node id="Target" type="class"/>
					<node id="Adaptee" type="class">
						<attribute id="adaptee" type="Adaptee"/>
						<method id="request"/>
					</node>
					<node id="Adaptee" type="class">
						<method id="specificRequest" />
					</node>
				</nodes>
				<edges>
					<edge id="ClientTarget" node1="Client"	node2="Target"/>
					<edge id="AdapterAdaptee" node1="Adapter" node2="Adaptee"/>
					<edge id="AdapterTarget" node1="Adapter" node2="Target"/>
				</edges>
			</structure>
			<conditions>
			  <condition id="1" description="The Client has a directed association with the Target.">
					<rule applies="ClientTarget" scope="relation" topic="type" operator="equals" value="ASSOCIATION_DIRECTED"/> 
			  </condition>
			  <condition id="2" description="The Adapter has a directed association with the Adaptee.">
					<rule applies="AdapterAdaptee" scope="relation"  topic="type" operator="equals" value="ASSOCIATION_DIRECTED"/>
			  </condition>
			  <condition id="3" description="The Adapter has a inheritance relation with the Target (abstract class).">
					<rule applies="AdapterTarget" topic="type" scope="relation" operator="equals" value="INHERITANCE"/>					
			  </condition>
			  <condition id="4" description="The Target is an abstract class.">
					<rule applies="Target" scope="object" topic="modifier_abstract" operator="equals" value="true"/>
			  </condition>
				<condition id="5" description="The Adapter uses exactly one Adaptee. An Adaptee can be used by none or more Adapters.">
					<rule applies="AdapterAdaptee" scope="relation" topic="cardinality-front" operator="equals" value="0..*"/>
					<rule applies="AdapterAdaptee" scope="relation" topic="cardinality-end" operator="equals" value="1"/>					
			  </condition>
<!--				<condition id="11" description="The Client does not have an Adaptee attribute.">
					<rule applies="Client" scope="attribute" topic="type" not="true" operator="exists" value="Adaptee"/>						
				</condition>
-->				<condition id="12" description="The Adaptee attribute in the Adapter has a private visibility.">
					<rule applies="adaptee" scope="object" topic="visibility" operator="equals" value="private"/>					
				</condition>
			</conditions>
   </template>			               			                 				               			                 

		<template name ="Adapter-ObjectAdapter-Interface" superpattern="Adapter">	
			<structure>
				<nodes>
					<node id="Client"  type="class">
						<attribute id="adapter" type="Target"/>
						<method id="adapter.request" />
					</node>
					<node id="Target" type="interface"/>
					<node id="Adapter" type="class">
						<attribute id="adaptee" type="Adaptee"/>
						<method id="request"/>
					</node>
					<node id="Adaptee" type="class">
						<method id="specificRequest" />
					</node>
				</nodes>
				<edges>
					<edge id="ClientTarget" node1="Client"	node2="Target"/>
					<edge id="AdapterAdaptee" node1="Adapter" node2="Adaptee"/>
					<edge id="AdapterTarget" node1="Adapter" node2="Target"/>
				</edges>
			</structure>
			<conditions>
				<condition id="1" description="The Client has a directed association with the Target.">
					<rule applies="ClientTarget" scope="relation" topic="type" operator="equals" value="ASSOCIATION_DIRECTED"/> 
				</condition>
				<condition id="2" description="The Adapter has a directed association with the Adaptee.">
					<rule applies="AdapterAdaptee" scope="relation"  topic="type" operator="equals" value="ASSOCIATION_DIRECTED"/>
				</condition>
				<condition id="4" description="The Adapter is a realization of the Target (interface).">
					<rule applies="AdapterTarget" scope="relation" topic="type" operator="equals" value="REALIZATION"/>
				</condition>
				<condition id="6" description="The Adapter uses exactly one Adaptee. An Adaptee can be used by none or more Adapters.">
					<rule applies="AdapterAdaptee" scope="relation" operator="equals" topic="cardinality-front" value="0..*"/>
					<rule applies="AdapterAdaptee" scope="relation" operator="equals" topic="cardinality-end" value="1"/>					
				</condition>
<!--			 <condition id="13" description="The Client does not have an Adaptee attribute.">
					<rule applies="Client" scope="attribute" not="true" operator="exists" topic="type" value="Adaptee"/>						
				</condition>
-->				 <condition id="12" description="The Adaptee attribute in the Adapter has a private visibility.">
						<rule applies="adaptee" scope="object" topic="visibility" operator="equals" value="private"/>					
					</condition>
			</conditions>

   </template>	
	 
	    <template name ="Adapter-ClassAdapter" superpattern="Adapter">	
			<structure>
				<nodes>
					<node id="Client" type="class">
						<attribute id="adapter" type="Target"/>
					</node>
					<node id="Target" type="interface">
						<method id="request" />
					</node>
					<node id="Adapter" type="class">
						<method id="request"/>
					</node>
					<node id="Adaptee" type="class">
						<method id="specificRequest" />
					</node>
				</nodes>
				<edges>
					<edge id="ClientTarget" node1="Client"	node2="Target"/>
					<edge id="AdapterAdaptee" node1="Adapter" node2="Adaptee"/>
					<edge id="AdapterTarget" node1="Adapter" node2="Target"/>
				</edges>
			</structure>
			<conditions>
				<condition id="1" description="The Client has a directed association with the Target.">
					<rule applies="ClientTarget" scope="relation" topic="type" operator="equals" value="ASSOCIATION_DIRECTED"/> 
				</condition>
				<condition id="2" description="The Adapter has a inheritance relation with the Adaptee.">
					<rule applies="AdapterAdaptee" scope="relation"  topic="type" operator="equals" value="INHERITANCE"/>
				</condition>
				<condition id="3" description="The Adapter is a realization of the Target (interface).">
					<rule applies="AdapterTarget" scope="relation" topic="type" operator="equals" value="REALIZATION"/>					
				</condition>
<!--			 <condition id="13" description="The Client does not have an Adaptee attribute.">
					<rule applies="Client" scope="attribute" topic="type" not="true" operator="exists" value="Adaptee"/>						
				</condition>
-->		</conditions>
 
   </template>		
	 
</templates>
    
